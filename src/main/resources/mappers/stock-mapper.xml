<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.semi.mappers.StockMapper">
    <resultMap id="stockResult" type="Stock">
        <result column="STOCK_NO" property="stockNo"/>
        <result column="STOCK_EMP" property="stockEmp"/>
        <result column="STOCK_DATE" property="stockDate"/>
        <result column="EXP_DATE" property="expDate"/>
        <result column="STOCK_STATUS" property="stockStatus"/>
        <result column="MEM_NAME" property="memName"/>
        <result column="AMOUNT" property="amount"/>
        <result column="PRICE" property="price"/>
        <result column="STORAGE_NO" property="storageNo"/>
        <result column="PRODUCT_NO" property="productNo"/>
        <result column="STORE_ID" property="storeId"/>
    </resultMap>
    <resultMap id="stockProductResult" type="StockProduct">
        <result column="STOCK_NO" property="stockNo"/>
        <result column="PRODUCT_NO" property="productNo"/>
        <result column="STORAGE_NO" property="storageNo"/>
        <result column="AMOUNT" property="amount"/>
        <result column="PRICE" property="price"/>
        <result column="TAXPRICE" property="taxPrice"/>
        <result column="TAX" property="tax"/>
        <result column="PRODUCT_NAME" property="productName"/>
        <result column="PRODUCT_SIZE" property="productSize"/>
        <result column="COLOR" property="color"/>
        <result column="CATEGORY_NAME" property="categoryName"/>
        <result column="STORAGE_LOCATION" property="storageLocation"/>
    </resultMap>

    <insert id="insertStockIn" parameterType="Stock">
        <selectKey keyProperty="stockNo" resultType="int" order="BEFORE">
            SELECT STOCK_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO STOCK (
        STOCK_NO,
        STOCK_EMP,
        EXP_DATE,
        STOCK_STATUS
        ) VALUES (
        #{stockNo},
        #{stockEmp},
        #{expDate},
        'STOCK_IN_REGISTERED'
        )
    </insert>

    <insert id="insertStockOut" parameterType="Stock">
        <selectKey keyProperty="stockNo" resultType="int" order="BEFORE">
            SELECT STOCK_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO STOCK (
        STOCK_NO,
        STOCK_EMP,
        EXP_DATE,
        STOCK_STATUS
        ) VALUES (
        #{stockNo},
        #{stockEmp},
        #{expDate},
        'STOCK_OUT_REGISTERED'
        )
    </insert>

    <insert id="insertStockProduct" parameterType="StockProduct">
        INSERT INTO STOCK_PRODUCT(
        STOCK_NO,
        PRODUCT_NO,
        STORAGE_NO,
        AMOUNT,
        PRICE,
        TAXPRICE,
        TAX
        ) VALUES(
        #{stockNo},
        #{productNo},
        #{storageNo},
        #{amount},
        #{price},
        #{taxPrice},
        <choose>
            <when test="tax == 0"> 'Y' </when>
            <when test="tax == 1"> 'N' </when>
            <otherwise> 'N' </otherwise>
        </choose>
        )
    </insert>

    <select id="selectStockProductList" parameterType="StockProduct" resultMap="stockProductResult">
        SELECT
        SP.STOCK_NO,
        SP.PRODUCT_NO,
        SP.STORAGE_NO,
        SP.AMOUNT,
        SP.PRICE,
        SP.TAXPRICE,
        SP.TAX,
        P.PRODUCT_NAME,
        C.CATEGORY_NAME,
        P.PRODUCT_SIZE,
        P.COLOR
        FROM STOCK_PRODUCT SP
        JOIN STOCK S ON SP.STOCK_NO = S.STOCK_NO
        JOIN MEMBER M ON M.EMP_NO = S.STOCK_EMP
        JOIN PRODUCT P ON SP.PRODUCT_NO = P.PRODUCT_NO
        JOIN CATEGORY C ON P.CATEGORY_NO = C.CATEGORY_NO
        WHERE M.STORE_ID = (
        SELECT STORE_ID
        FROM MEMBER
        WHERE EMP_NO = #{empNo}
        )
        AND (S.STATUS = 'Y' OR S.STATUS = 'C')
        ORDER BY SP.STOCK_NO, SP.PRODUCT_NO
    </select>

    <update id="updateStockInStatus">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_IN_PROGRESS',
        MODIFY_DATE = SYSDATE
        WHERE STOCK_NO = #{stockNo}
    </update>

    <update id="updateStockOutStatus">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_OUT_PROGRESS',
        MODIFY_DATE = SYSDATE
        WHERE STOCK_NO = #{stockNo}
    </update>

    <update id="deleteStock">
        UPDATE STOCK SET STATUS = 'N'
        WHERE STOCK_NO = #{stockNo}
    </update>

    <delete id="deleteStockProduct">
        DELETE FROM STOCK_PRODUCT
        WHERE STOCK_NO = #{stockNo}
    </delete>

    <select id="selectStock" parameterType="Stock" resultMap="stockResult">
        SELECT STOCK_NO,
        MEM_NAME,
        TO_CHAR(STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        STOCK_STATUS
        FROM STOCK S JOIN MEMBER M ON (EMP_NO = STOCK_EMP)
        WHERE (S.STATUS = 'Y' OR S.STATUS = 'C')
        AND STOCK_NO = #{stockNo}
    </select>

    <select id="selectStockProduct" parameterType="StockProduct" resultMap="stockProductResult">
        SELECT STOCK_NO,
        PRODUCT_NO,
        STORAGE_NO,
        AMOUNT,
        PRICE,
        TAXPRICE as taxPrice,
        TAX,
        PRODUCT_NAME,
        CATEGORY_NAME,
        PRODUCT_SIZE,
        COLOR,
        STORAGE_LOCATION
        FROM STOCK_PRODUCT JOIN STOCK USING(STOCK_NO)
        JOIN PRODUCT USING(PRODUCT_NO)
        JOIN CATEGORY USING(CATEGORY_NO)
        JOIN STORAGE USING(STORAGE_NO)
        WHERE STOCK_NO = #{stockNo}
        ORDER BY STOCK_NO, PRODUCT_NO
    </select>

    <update id="updateCompletedStockIn">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_IN_COMPLETED',
            MODIFY_DATE = SYSDATE
        WHERE STOCK_STATUS = 'STOCK_IN_PROGRESS'
        AND TRUNC(EXP_DATE) = TRUNC(SYSDATE)
    </update>

    <select id="selectCompletedStockIn" parameterType="Stock" resultMap="stockResult">
        SELECT STOCK_NO, PRODUCT_NO, STORAGE_NO, AMOUNT, PRICE, M.STORE_ID
        FROM STOCK S
        JOIN STOCK_PRODUCT USING(STOCK_NO)
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        WHERE S.STOCK_STATUS = 'STOCK_IN_COMPLETED'
        AND S.STATUS = 'Y'
    </select>
    <update id="updateStockProcessedStatus">
        UPDATE STOCK
        SET STATUS = 'C'
        WHERE STOCK_NO = #{stockNo}
    </update>

<!--    // 입고 페이지 페이징 처리(였던것)-->
<!--    <select id="selectStockListforPaging" resultType="int">-->
<!--        SELECT COUNT(*)-->
<!--        FROM STOCK S-->
<!--        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO-->
<!--        WHERE S.STATUS IN ('Y', 'C', 'REGISTERED') &lt;!&ndash; 'REGISTERED' 상태 추가 &ndash;&gt;-->
<!--        <if test="status != null and status != '' and status != '전체'">-->
<!--            AND S.STOCK_STATUS = #{status}-->
<!--        </if>-->
<!--        AND M.STORE_ID = (-->
<!--        SELECT STORE_ID-->
<!--        FROM MEMBER-->
<!--        WHERE EMP_NO = #{empNo}-->
<!--        )-->
<!--    </select>-->

<!--    <select id="selectStockListByPage" resultMap="stockResult">-->
<!--        SELECT S.STOCK_NO, M.MEM_NAME,-->
<!--        TO_CHAR(S.STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,-->
<!--        TO_CHAR(S.EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,-->
<!--        S.STOCK_STATUS-->
<!--        FROM STOCK S-->
<!--        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO-->
<!--        JOIN MEMBER LOGIN_USER ON LOGIN_USER.EMP_NO = #{empNo}-->
<!--        WHERE S.STATUS IN ('Y', 'C')-->
<!--        <if test="status != null and status != '' and status != '전체'">-->
<!--            AND S.STOCK_STATUS = #{status}-->
<!--        </if>-->
<!--        <if test="status == '전체'">-->
<!--            &#45;&#45; status가 '전체'일 경우 S.STOCK_STATUS 조건을 제외-->
<!--        </if>-->
<!--        AND M.STORE_ID = LOGIN_USER.STORE_ID-->
<!--        ORDER BY S.STOCK_NO-->
<!--    </select>-->

    <select id="countStockIn" resultType="_int">
        SELECT
        COUNT(*)
        FROM STOCK S
        JOIN MEMBER M ON M.EMP_NO = S.STOCK_EMP
        WHERE M.STORE_ID = (
        SELECT STORE_ID
        FROM MEMBER
        WHERE EMP_NO = #{empNo}
        )
        AND (S.STATUS = 'Y' OR S.STATUS = 'C')
        AND S.STOCK_STATUS = 'STOCK_IN_PROGRESS'
    </select>

    <select id="countStockOut" resultType="_int">
        SELECT
        COUNT(*)
        FROM STOCK S
        JOIN MEMBER M ON M.EMP_NO = S.STOCK_EMP
        WHERE M.STORE_ID = (
        SELECT STORE_ID
        FROM MEMBER
        WHERE EMP_NO = #{empNo}
        )
        AND (S.STATUS = 'Y' OR S.STATUS = 'C')
        AND S.STOCK_STATUS = 'STOCK_OUT_PROGRESS'
    </select>

    <update id="updateCompletedStockOut">
        UPDATE STOCK
        SET STOCK_STATUS = 'STOCK_OUT_COMPLETED',
        MODIFY_DATE = SYSDATE
        WHERE STOCK_STATUS = 'STOCK_OUT_PROGRESS'
        AND TRUNC(EXP_DATE) = TRUNC(SYSDATE)
    </update>

    <select id="selectCompletedStockOut" parameterType="Stock" resultMap="stockResult">
        SELECT STOCK_NO, PRODUCT_NO, STORAGE_NO, AMOUNT, PRICE, M.STORE_ID
        FROM STOCK S
        JOIN STOCK_PRODUCT USING(STOCK_NO)
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        WHERE S.STOCK_STATUS = 'STOCK_OUT_COMPLETED'
        AND S.STATUS = 'Y'
    </select>


    <!--    //입고 페이징-->
    <select id="selectStockInListforPaging" resultType="int">
        SELECT COUNT(DISTINCT S.STOCK_NO)
        FROM STOCK S
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        JOIN MEMBER LOGIN_USER ON LOGIN_USER.EMP_NO = #{empNo}
        WHERE S.STATUS IN ('Y', 'C')
        AND S.STOCK_STATUS LIKE 'STOCK_IN%'
        AND S.STOCK_STATUS LIKE 'STOCK_IN%'
        AND M.STORE_ID = LOGIN_USER.STORE_ID
        <if test="status != null and status != '' and status != '전체'">
            AND S.STOCK_STATUS = #{status}
        </if>
        <if test="startDate != null and startDate != ''">
            AND STOCK_DATE BETWEEN #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND #{endDate}
        </if>
    </select>

    <select id="selectStockInListByPage" resultMap="stockResult">
        SELECT DISTINCT S.STOCK_NO,
        M.MEM_NAME,
        TO_CHAR(S.STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(S.EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        S.STOCK_STATUS
        FROM STOCK S
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        JOIN MEMBER LOGIN_USER ON LOGIN_USER.EMP_NO = #{empNo}
        WHERE S.STATUS IN ('Y', 'C')
        AND S.STOCK_STATUS LIKE 'STOCK_IN%'
        AND M.STORE_ID = LOGIN_USER.STORE_ID
        <if test="status != null and status != '' and status != '전체'">
            AND S.STOCK_STATUS = #{status}
        </if>
        <if test="startDate != null and startDate != ''">
            AND STOCK_DATE BETWEEN #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND #{endDate}
        </if>
        ORDER BY S.STOCK_NO DESC
    </select>

    <!--    //출고 페이징-->
    <select id="selectStockOutListforPaging" resultType="int">
        SELECT COUNT(DISTINCT S.STOCK_NO)
        FROM STOCK S
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        JOIN MEMBER LOGIN_USER ON LOGIN_USER.EMP_NO = #{empNo}
        WHERE S.STATUS IN ('Y', 'C')
        AND S.STOCK_STATUS LIKE 'STOCK_OUT%'
        AND M.STORE_ID = LOGIN_USER.STORE_ID
        <if test="status != null and status != '' and status != '전체'">
            AND S.STOCK_STATUS = #{status}
        </if>
        <if test="startDate != null and startDate != ''">
            AND STOCK_DATE BETWEEN #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND #{endDate}
        </if>
    </select>

    <select id="selectStockOutListByPage" resultMap="stockResult">
        SELECT DISTINCT S.STOCK_NO,
        M.MEM_NAME,
        TO_CHAR(S.STOCK_DATE, 'YYYY-MM-DD') AS STOCK_DATE,
        TO_CHAR(S.EXP_DATE, 'YYYY-MM-DD') AS EXP_DATE,
        S.STOCK_STATUS
        FROM STOCK S
        JOIN MEMBER M ON S.STOCK_EMP = M.EMP_NO
        JOIN MEMBER LOGIN_USER ON LOGIN_USER.EMP_NO = #{empNo}
        WHERE S.STATUS IN ('Y', 'C')
        AND S.STOCK_STATUS LIKE 'STOCK_OUT%'
        AND M.STORE_ID = LOGIN_USER.STORE_ID
        <if test="status != null and status != '' and status != '전체'">
            AND S.STOCK_STATUS = #{status}
        </if>
        <if test="startDate != null and startDate != ''">
            AND STOCK_DATE BETWEEN #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND #{endDate}
        </if>
        ORDER BY S.STOCK_NO DESC
    </select>
</mapper>